<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title><%= title %> / AR</title>
    <script src="https://aframe.io/releases/1.5.0/aframe.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js"></script>
    <script src="https://rawgit.com/donmccurdy/aframe-extras/master/dist/aframe-extras.loaders.min.js"></script>
    <script src="https://raw.githack.com/fcor/arjs-gestures/master/dist/gestures.js"></script>
    <link rel="stylesheet" href="../stylesheets/arScreen.css" />
  </head>
  <body style="margin: 0px; overflow: hidden">
    <a-scene embedded arjs="sourceType: webcam;"
      gesture-detector
    >
      <% markersAndModels.forEach(function(marker) { %>
      <a-marker
        id="marker-<%= marker.id %>"
        preset="<%= marker.preset %>"
        type="pattern"
        url="<%= marker.patt %>"
        position="<%= marker.marker_position %>"
        scale="<%= marker.marker_scale %>"
        rotation="<%= marker.marker_rotation %>"
      >
        <a-text
          id="text-<%= marker.id %>"
          value="<%= marker.text_data %>"
          color="<%= marker.text_color %>"
          position="<%= marker.text_position %>"
          rotation="<%= marker.text_rotation %>"
          scale="<%= marker.text_scale %>"
        >
        </a-text>
        <a-entity
          gltf-model="<%= marker.src %>"
          position="<%= marker.model_position %>"
          scale="<%= marker.model_scale %>"
          rotation="<%= marker.model_rotation %>"
          animation-mixer="<%= marker.anim_conf %>"
          gesture-handler
        >
        </a-entity>
      </a-marker>
      <% }); %>
      <a-entity camera> </a-entity>
    </a-scene>

    <!-- Fuente de video -->
    <video id="webcam" autoplay style="display: none"></video>
    <!-- Canvas para captura de screenshots -->
    <canvas id="canvas" width="800" height="600" style="display: none"></canvas>

    <div id="actionElements">
      <div id="progesoContainer">
        <progress id="progresoMarker" value="0" max="<%= markersAndModels.length %>"></progress>
      </div>

      <!-- BOTON SCREENSHOT -->
      <button class="arButton" id="takeScreenshot">
        <img src="../images/icons/photo-camera (2).png" width="75" height="75" />
      </button>

      <!-- MENU INFORMACION -->
      <button class="arButton" id="openMenu">
        <img src="../images/icons/info.png" width="75" height="75" />
      </button>

      <div class="menu" id="menu">
        <div class="menuContenido">
          <img src="../images/th1.jpeg" width="75" height="75" />
          <h2 id="nombreUser">HOLA USUARIO</h2>
          <!-- LISTA DE MARCADORES ENCONTRADOS -->
          <h3>Marcadores Encontrados:</h3>
          <ul class="lista" id="listaUser"></ul>
          <div class="btnwrap">
            <button class="menuButton" id="exitAR">Salir</button>
            <button class="menuButton" id="closeMenu">Cerrar</button>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Numero de marcadores necesarios a escanear
      const totalMarkers = <%= markersAndModels.length %>;

      <% if (currentUser) { %>
      const name = '<%= currentUser.fullName %>';
      console.log(name);
      <% } %>

      // TODO: obtener los marcadores escaneados de la base de datos
      const detectedMarkers = new Set();
      // BANDERA DE DETECTAR TODOS
      let allDetected=false;

      //Barra Progreso
      var barra=document.getElementById("progresoMarker");

      //Lista Marcadores Usuario
      var lista = document.getElementById("listaUser");

      var openBTN= document.getElementById("openMenu");
      var closeBTN = document.getElementById("closeMenu");
      var exitBTN = document.getElementById("exitAR");
      var menu= document.getElementById("menu");
      var uName= document.getElementById("nombreUser");


      openBTN.addEventListener("click",()=>{
        menu.classList.add("open");
      });

      closeBTN.addEventListener("click",()=>{
        menu.classList.remove("open");
      });

      exitBTN.addEventListener("click",()=>{
        window.history.back();
      });

      if(name!=null){
        uName.innerHTML="Hola "+name;
      }

      //REPRODUCIR AUDIO
      function playSound(path,loop){
        let audio = new Audio(path);
        audio.loop=loop;
        audio.play();
      }

      function updateProgress(value) {
        // Calculate the position for each progress point
        const starPosition = (100 / totalMarkers) * value;
        const progressPoint = document.createElement('span');
        progressPoint.className = 'progress-point';
        progressPoint.style.left = `${starPosition-3}%`;
        progressPoint.innerHTML = '&#9733;'; // Unicode for star icon or any emoji
        barra.parentNode.appendChild(progressPoint);
        setTimeout(() => {progressPoint.classList.add('show');}, 30);
      }

      function updateList(value){
        var item = document.createElement("li");
        item.className="item-usuario";
        item.innerHTML=value;
        lista.parentNode.appendChild(item);
      }

      <% markersAndModels.forEach(function(marker) { %>
        const marker<%= marker.id %> = document.querySelector('#marker-<%= marker.id %>');
        const text<%= marker.id %> = document.querySelector('#text-<%= marker.id %>');

        if (marker<%= marker.id %>) {

          marker<%= marker.id %>.addEventListener('markerFound', function() {
            console.log('Marker <%= marker.id %> encontrado!');
            playSound('../assets/sounds/mixkit-long-pop-2358.wav',false)
            console.log("barra "+barra.value)
            // var strings=text<%= marker.id %>.getAttribute("value").split(" ");

            // Añadir marcador a la lista
            if (!detectedMarkers.has('<%= marker.id %>')) {
              detectedMarkers.add('<%= marker.id %>');
              console.log(detectedMarkers.size);
              barra.value=detectedMarkers.size;
              updateProgress(barra.value);

              const presetValue = '<%= marker.preset %>';
              console.log(presetValue);
              updateList(presetValue);
              playSound('../assets/sounds/mixkit-bonus-earned-in-video-game-2058.wav',false)
            }

            //Lista de marcadores escaneados
            //TODO: Actualizar lista de marcadores encontrados en la base de datos
            console.log('Lista de marcadores:', Array.from(detectedMarkers));

            // Revisión de lista completa
            if (detectedMarkers.size === totalMarkers) {

              console.log('Todos los marcadores han sido encontrados!');
              if(!allDetected){
                playSound('../assets/sounds/mixkit-small-win-2020.wav',false)
                // setTimeout(function() {
                //   window.open('https://www.google.com', '_blank');
                // }, 2000); // Retraso de 2000 milisegundos (2 segundos)
              }
              allDetected=true
            }
          });
          marker<%= marker.id %>.addEventListener('markerLost', function() {
            console.log('Marker #<%= marker.id %> perdido!');
            playSound('../assets/sounds/mixkit-dry-pop-up-notification-alert-2356.wav',false)

          });
        } else {
          console.error(`Marcador no encontrado: #marker-<%= marker.id %>`);
        }
      <% }); %>
    </script>

    <!-- Script de captura de pantalla -->
    <script type="text/javascript" src="../javascripts/screenshoot.js"></script>
  </body>
</html>
