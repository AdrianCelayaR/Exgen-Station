<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title><%= title %> / AR</title>
    <script src="https://aframe.io/releases/1.5.0/aframe.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js"></script>
    <script src="https://rawgit.com/donmccurdy/aframe-extras/master/dist/aframe-extras.loaders.min.js"></script>

    <style>
      #takeScreenshot {
        position: fixed;
        top: 10px;
        right: 10px;
        z-index: 100;
        padding: 10px 20px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }
    </style>
  </head>
  <body style="margin: 0px; overflow: hidden">
    <a-scene embedded arjs="sourceType: webcam;">
      <% markersAndModels.forEach((item, index) => { %>
      <a-marker
        id="marker-<%= index %>"
        preset="<%= item.marker.preset %>"
        type="pattern"
        url="<%= item.marker.patt %>"
        position="<%= item.marker.position %>"
        scale="<%= item.marker.scale %>"
        rotation="<%= item.marker.rotation %>"
      >
        <a-text
          id="text-<%= index %>"
          value="<%= item.text.data %>"
          color="<%= item.text.color %>"
          position="<%= item.text.position %>"
          rotation="<%= item.text.rotation %>"
          scale="<%= item.text.scale %>"
        >
        </a-text>
        <a-entity
          gltf-model="<%= item.model.src %>"
          position="<%= item.model.position %>"
          scale="<%= item.model.scale %>"
          rotation="<%= item.model.rotation %>"
          animation-mixer="<%= item.model.animConf %>"
        >
        </a-entity>
      </a-marker>
      <% }); %>
      <a-entity camera> </a-entity>
    </a-scene>

    <!-- Fuente de video -->
    <video id="webcam" autoplay style="display: none"></video>
    <!-- Canvas para captura de screenshots -->
    <canvas id="canvas" width="800" height="600" style="display: none"></canvas>

    <button id="takeScreenshot">Tomar Captura</button>

    <script>
      // Numero de marcadores necesarios a escanear
      const totalMarkers = <%= markersAndModels.length %>;

      // TODO: obtener los marcadores escaneados de la base de datos
      const detectedMarkers = new Set();
      // BANDERA DE DETECTAR TODOS
      let allDetected=false;

      //REPRODUCIR AUDIO
      function playSound(path,loop){
        let audio = new Audio(path);
        audio.loop=loop;
        audio.play();
      }

      <% markersAndModels.forEach((item, index) => { %>
        const marker<%= index %> = document.querySelector('#marker-<%= index %>');
        const text<%= index %> = document.querySelector('#text-<%= index %>');

        if (marker<%= index %>) {

          marker<%= index %>.addEventListener('markerFound', function() {
            console.log('Marker ');
            playSound('../assets/sounds/mixkit-long-pop-2358.wav',false)
            // var strings=text<%= index %>.getAttribute("value").split(" ");

            // Añadir marcador a la lista
            if (!detectedMarkers.has('<%= index %>')) {
              detectedMarkers.add('<%= index %>');
              playSound('../assets/sounds/mixkit-bonus-earned-in-video-game-2058.wav',false)
            }

            //Lista de marcadores escaneados
            //TODO: Actualizar lista de marcadores encontrados en la base de datos
            console.log('Lista de marcadores:', Array.from(detectedMarkers));

            // Revisión de lista completa
            if (detectedMarkers.size === totalMarkers) {

              console.log('Todos los marcadores han sido encontrados!');
              if(!allDetected){
                playSound('../assets/sounds/mixkit-small-win-2020.wav',false)
                setTimeout(function() {
                  window.open('https://www.google.com', '_blank');
                }, 2000); // Retraso de 2000 milisegundos (2 segundos)
              }
              allDetected=true
            }
          });

          marker<%= index %>.addEventListener('markerLost', function() {
            console.log('Marker #<%= index %> perdido!');
            playSound('../assets/sounds/mixkit-dry-pop-up-notification-alert-2356.wav',false)

          });
        } else {
          console.error(`Marcador no encontrado: #marker-<%= index %>`);
        }
      <% }); %>
    </script>

    <!--Script de captura de pantalla-->
    <script>
      // Tomar fuente de video dependiendo del dispositivo
      const isMobile = /Mobi|Android/i.test(navigator.userAgent);

      const facingMode = isMobile ? "environment" : "user";

      navigator.mediaDevices
        .getUserMedia({
          video: { facingMode: { exact: facingMode } },
        })
        .then((stream) => {
          document.getElementById("webcam").srcObject = stream;
        })
        .catch((err) => {
          console.error("Error accessing camera:", err);
        });

      // Listener para el botón de captura
      document.getElementById("takeScreenshot").addEventListener("click", () => {
        const canvas = document.getElementById("canvas");
        //Ajuste de tamaño del canvas para la imagen producida
        canvas.width = isMobile ? 720 : webcam.videoWidth; //<--- Esto directamente decide el tamaño de la imgen
        canvas.height = isMobile ? 1280 : webcam.videoHeight; //<--- En teléfono se mira bien (Los de la izquierda)

        const context = canvas.getContext("2d");

        // Dibujar imagen de cámara en el canvas
        const video = document.getElementById("webcam");
        context.drawImage(video, 0, 0, canvas.width, canvas.height);

        // Dibujar contenido del a-scene en el canvas
        const aScene = document.querySelector("a-scene");
        const renderer = aScene.renderer;

        if (renderer) {
          renderer.render(aScene.object3D, aScene.camera);
          context.drawImage(renderer.domElement, 0, 0, canvas.width, canvas.height);
        }

        // Descargar archivo
        const combinedImage = canvas.toDataURL("image/png");
        const link = document.createElement("a");
        link.href = combinedImage;
        link.download = "combined_screenshot.png";
        link.click();
      });
    </script>
  </body>
</html>
