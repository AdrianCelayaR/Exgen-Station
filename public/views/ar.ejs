<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title><%= title %> / AR</title>
    <script src="https://aframe.io/releases/1.5.0/aframe.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js"></script>
    <script src="https://rawgit.com/donmccurdy/aframe-extras/master/dist/aframe-extras.loaders.min.js"></script>

    <link rel="stylesheet" href="../stylesheets/arScreen.css" />
  </head>
  <body style="margin: 0px; overflow: hidden">
    <a-scene embedded arjs="sourceType: webcam;">
      <% markersAndModels.forEach((item, index) => { %>
      <a-marker
        id="marker-<%= index %>"
        preset="<%= item.marker.preset %>"
        type="pattern"
        url="<%= item.marker.patt %>"
        position="<%= item.marker.position %>"
        scale="<%= item.marker.scale %>"
        rotation="<%= item.marker.rotation %>"
      >
        <a-text
          id="text-<%= index %>"
          value="<%= item.text.data %>"
          color="<%= item.text.color %>"
          position="<%= item.text.position %>"
          rotation="<%= item.text.rotation %>"
          scale="<%= item.text.scale %>"
        >
        </a-text>
        <a-entity
          gltf-model="<%= item.model.src %>"
          position="<%= item.model.position %>"
          scale="<%= item.model.scale %>"
          rotation="<%= item.model.rotation %>"
          animation-mixer="<%= item.model.animConf %>"
        >
        </a-entity>
      </a-marker>
      <% }); %>
      <a-entity camera> </a-entity>
    </a-scene>

    <!-- Fuente de video -->
    <video id="webcam" autoplay style="display: none"></video>
    <!-- Canvas para captura de screenshots -->
    <canvas id="canvas" width="800" height="600" style="display: none"></canvas>

    <button id="takeScreenshot">
      <img src="../images/icons/photo-camera (2).png" width="75" height="75" />
    </button>
    <progress id="progresoMarker" value="0" max="<%= markersAndModels.length %>"></progress>

    <script>
      // Numero de marcadores necesarios a escanear
      const totalMarkers = <%= markersAndModels.length %>;

      // TODO: obtener los marcadores escaneados de la base de datos
      const detectedMarkers = new Set();
      // BANDERA DE DETECTAR TODOS
      let allDetected=false;

      //Barra Progreso
      var barra=document.getElementById("progresoMarker");

      //REPRODUCIR AUDIO
      function playSound(path,loop){
        let audio = new Audio(path);
        audio.loop=loop;
        audio.play();
      }

      function updateProgress(value) {
        var starPosition = (100 / <%= markersAndModels.length %>) * value;
        if(starPosition==100)
          starPosition=99;
        console.log(starPosition)
        const starIcon = document.createElement('span');
        starIcon.innerHTML = '&#9733;'; // Unicode for star icon
        starIcon.style.position = 'absolute';
        starIcon.style.top = '-1px'; // Adjust as needed
        starIcon.style.left = `${starPosition - 1}%`;
        starIcon.style.fontSize = '35px'; // Adjust size as needed
        starIcon.style.color = 'gold'; // Adjust color as needed
        starIcon.style.zIndex=202;
        barra.parentNode.appendChild(starIcon);
      }

      <% markersAndModels.forEach((item, index) => { %>
        const marker<%= index %> = document.querySelector('#marker-<%= index %>');
        const text<%= index %> = document.querySelector('#text-<%= index %>');

        if (marker<%= index %>) {

          marker<%= index %>.addEventListener('markerFound', function() {
            console.log('Marker ');
            playSound('../assets/sounds/mixkit-long-pop-2358.wav',false)
            console.log("barra "+barra.value)
            // var strings=text<%= index %>.getAttribute("value").split(" ");

            // Añadir marcador a la lista
            if (!detectedMarkers.has('<%= index %>')) {
              detectedMarkers.add('<%= index %>');
              console.log(detectedMarkers.size);
              barra.value=detectedMarkers.size;
              updateProgress(barra.value);
              playSound('../assets/sounds/mixkit-bonus-earned-in-video-game-2058.wav',false)
            }

            //Lista de marcadores escaneados
            //TODO: Actualizar lista de marcadores encontrados en la base de datos
            console.log('Lista de marcadores:', Array.from(detectedMarkers));

            // Revisión de lista completa
            if (detectedMarkers.size === totalMarkers) {

              console.log('Todos los marcadores han sido encontrados!');
              if(!allDetected){
                playSound('../assets/sounds/mixkit-small-win-2020.wav',false)
                // setTimeout(function() {
                //   window.open('https://www.google.com', '_blank');
                // }, 2000); // Retraso de 2000 milisegundos (2 segundos)
              }
              allDetected=true
            }
          });

          marker<%= index %>.addEventListener('markerLost', function() {
            console.log('Marker #<%= index %> perdido!');
            playSound('../assets/sounds/mixkit-dry-pop-up-notification-alert-2356.wav',false)

          });
        } else {
          console.error(`Marcador no encontrado: #marker-<%= index %>`);
        }
      <% }); %>
    </script>

    <!-- Script de captura de pantalla -->
    <script type="text/javascript" src="../javascripts/screenshoot.js"></script>
  </body>
</html>
